#! /bin/bash

set -o errexit
set -o nounset
set -o pipefail

goversion=1.21.6

declare -r source_dir="$(dirname "$(readlink -f "${BASH_SOURCE}")")"

declare -A dotfiles=(
[.aliases]="${HOME}"
[.amzn_aliases]="${HOME}"
[.profile]="${HOME}"
[.vimrc]="${HOME}"
[.bashrc]="${HOME}"
[.gitconfig]="${HOME}"
[.git-prompt.sh]="${HOME}"
)

declare -A repositories=(
"ppa:mithrandie/csvq"
"ppa:rael-gc/rvm"
"ppa:audio-recorder/ppa"
)

declare -r PACKAGES=(
"byobu"
"htop"
"gcc"
"vim"
"curl"
"xclip"
"openjdk-8-jdk"
"openjdk-11-jdk"
"openjdk-17-jdk"
"jq"
"csvq"
"libfuse2"
"make"
"texlive-latex-base"
"texlive-latex-recommended"
"latexmk"
"texlive-latex-extra"
"remmina"
"remmina-plugin-vnc"
"rpm"
"duf"
"fzf"
"tre-command"
"xsel"
"npm"
"audio-recorder"
"flatpak"
"gnome-software-plugin-flatpak"
)

declare -A npm_packages=(
#"tldr"
)

function install_dotfile() {
  local dotfile="$1"
  local install_path=$(dirname "$2/$dotfile")
  mkdir -p "${install_path}"
  local cmd=(ln -fs "${source_dir%%/}/files/${dotfile}" "${install_path%%/}/${dotfile}")
  echo "!installing ${dotfile}: ${cmd[@]}"
  "${cmd[@]}"
}

function install_chrome() {
  mkdir -p ${HOME}/tmp
  wget -P ${HOME}/tmp https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  sudo dpkg -i ${HOME}/tmp/google-chrome-stable_current_amd64.deb
  rm -rf ${HOME}/tmp
}

function install_go() {
  mkdir -p ${HOME}/tmp
  wget -P ${HOME}/tmp https://dl.google.com/go/go$goversion.linux-amd64.tar.gz 
  sudo tar -C /usr/local -xzf ${HOME}/tmp/go$goversion.linux-amd64.tar.gz
  rm -rf ${HOME}/tmp/
}

function install_rust() {
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
}

function add_apt_repository() {
  local repo="$1"
  local cmd=(sudo add-apt-repository ${repo} --yes)
  echo "installing ${repo}"
  "${cmd[@]}"
}

function add_npm_repository() {
  local repo="$1"
  local cmd=(npm install -g ${repo})
  echo "installing ${repo}"
  "${cmd[@]}"
}

function install_obsidian() {
  pkg="obsidian-latest.deb"
  releases_url="https://api.github.com/repos/obsidianmd/obsidian-releases/releases/latest"
  download_url="$(wget -q "${releases_url}" -O - | jq -r '.assets[] | select(.name | endswith("_amd64.deb")) | .browser_download_url')"
  mkdir -p ${HOME}/tmp
  wget "${download_url}" -O ${HOME}/tmp/"${pkg}"
  sudo dpkg -i ${HOME}/tmp/"${pkg}"
  rm -rf ${HOME}/tmp
}

function main() {

  # apt repository attachment
  for repo in "${!repositories[@]}"; do
    add_apt_repository "${repo}" 
  done

  # package installations
  for dotfile in "${!dotfiles[@]}"; do
    install_dotfile "${dotfile}" "${dotfiles[$dotfile]}"
  done

  # install nvm
  PROFILE=/dev/null bash -c $HOME/.dotfiles/node/install_nvm.sh

  # install go
  if ! command -v go --version &> /dev/null
  then
    echo the go command was not found on the system. installing from source.
    install_go
  else
    echo go is already installed on this machine, moving on
  fi

  # install chrome
  if ! command -v google-chrome --version &> /dev/null
  then
    echo google chrome not found on system. fetching the latest
    install_chrome
  else
    echo google chrome is already installed .
  fi

  # install obsidian
  if ! command -v obsidian &> /dev/null
  then 
    echo obsidian is not installed on system. fetching the latest
    install_obsidian
  else
    echo obsidian is already installed. 
  fi

  # package manager & text editor setup
  sudo apt update -y &&  sudo apt upgrade -y
  sudo apt install -y "${PACKAGES[@]}"

  # install npm packages
  for pkg in "${!npm_packages[@]}"; do
    npm install -g "${pkg}"
  done

  # install rust
  if ! command -v rustc &> /dev/null
  then 
    echo rust is not installed on system. fetching the latest
    install_rust
  else
    echo rust is already installed. 
  fi

  # add flathub repository
  flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

  # vim setup
  vim +BundleInstall +qall
  if [ ${HOME} != "/home/ANT.AMAZON.COM/whitfiec" ]
  then
    echo "we're not on an amazon machine, lets install vim go binaries!"
    vim +GoInstallBinaries +qall
  fi
  bash
}

main "${@}"
